generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model chain {
  id                  Int                   @id
  name                String
  chain_endpoint      chain_endpoint[]
  provider_chain      provider_chain[]
  event_tag_chain     event_tag_chain[]
  event_fetch_request event_fetch_request[]
  action              action[]
  account_factory     account_factory[]
  smart_account       smart_account[]
}

model chain_endpoint {
  id       Int    @id @default(autoincrement())
  chain_id Int
  type     String
  url      String
  chain    chain  @relation(fields: [chain_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum action_type {
  discord
  telegram
  onchain
  webhook
}

model provider {
  id             Int              @id @default(autoincrement())
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  description    String?
  http_token     String?
  ws_token       String?
  provider_chain provider_chain[]
  endpoint       endpoint[]
}

model provider_chain {
  provider_id    Int
  chain_id       Int
  provider_chain String
  provider       provider @relation(fields: [provider_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chain          chain    @relation(fields: [chain_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([provider_id, chain_id])
}

enum connection_type {
  http
  ws
}

model endpoint {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  description     String?
  connection_kind connection_type
  provider_id     Int
  provider        provider          @relation(fields: [provider_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  event_tag_chain event_tag_chain[]
}

model event_tag {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  description         String?
  event_tag_chain     event_tag_chain[]
  event_fetch_request event_fetch_request[]
}

model event_tag_chain {
  tag_id      Int
  chain_id    Int
  endpoint_id Int
  tag         event_tag @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chain       chain     @relation(fields: [chain_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  endpoint    endpoint  @relation(fields: [endpoint_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([tag_id, chain_id])
}

model event_fetch_request {
  id                                   Int                                    @id @default(autoincrement())
  createdAt                            DateTime                               @default(now())
  updatedAt                            DateTime                               @updatedAt
  tag_id                               Int
  chain_id                             Int
  tag                                  event_tag                              @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chain                                chain                                  @relation(fields: [chain_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  payload                              Json
  added_by                             String
  event_fetch_request_trigger_function event_fetch_request_trigger_function[]
}

model token_prices {
  token_address String
  chain_id      Int
  priceUsd      Float
  timestamp     DateTime

  @@id([token_address, chain_id, timestamp])
}

model event_fetch_request_trigger_function {
  id                     Int                 @id @default(autoincrement())
  event_fetch_request_id Int
  function_name          String
  function_args          Json?
  event_fetch_request    event_fetch_request @relation(fields: [event_fetch_request_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  added_by               String
  action                 action[]
}

model action {
  id                                      Int                                  @id @default(autoincrement())
  event_fetch_request_trigger_function_id Int
  user_id                                 String
  chain_id                                Int
  name                                    String
  chain                                   chain                                @relation(fields: [chain_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  destination                             destination[]
  action_condition                        action_condition[]
  event_fetch_request_trigger_function    event_fetch_request_trigger_function @relation(fields: [event_fetch_request_trigger_function_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  executed                                Int                                  @default(0)
  last_executed_at                        DateTime?                            @default(now())
  loop                                    Boolean                              @default(false)
  loop_config                             Json?
}

model action_condition {
  id        Int                     @id @default(autoincrement())
  action_id Int
  field     Unsupported("jsonpath")
  operator  String
  value     Json
  action    action                  @relation(fields: [action_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model destination {
  id                 Int         @id @default(autoincrement())
  action_id          Int
  type               action_type
  destination_config Json
  action             action      @relation(fields: [action_id], references: [id])
}

enum address_type {
  wallet
  email
}

model user {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  address      String?
  address_type address_type?
}

model account_factory {
  id            Int             @id @default(autoincrement())
  address       String
  chain_id      Int
  active        Boolean
  createdAt     DateTime        @default(now())
  chain         chain           @relation(fields: [chain_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  smart_account smart_account[]
}

model smart_account {
  id             Int             @id @default(autoincrement())
  user_address   String
  wallet_address String
  factory_id     Int
  chain_id       Int
  active         Boolean
  createdAt      DateTime        @default(now())
  chain          chain           @relation(fields: [chain_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  factory        account_factory @relation(fields: [factory_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
